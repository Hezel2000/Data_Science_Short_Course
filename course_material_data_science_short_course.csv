Titel,Kapitel,Unterkapitel,Schlagworte,Laufzeit,Duration,Lecture ipynb,Exercise ipynb,Solution ipynb,Beschreibung,Description,Youtube,Youtube_eng
Jupyter Notebook installation with Anaconda,1,1,"installation, Anaconda",03:05,04:21,none,none,none,"Als erstes installieren wir Jupyter Notebooks. Dazu verwenden wir Anaconda, welches wir über: https://www.anaconda.com/products/individual erhalten.","Als erstes installieren wir Jupyter Notebooks. Dazu verwenden wir Anaconda, welches wir über: https://www.anaconda.com/products/individual erhalten.",https://youtu.be/MK1jGJBydUM,https://youtu.be/m7uvkzKhXfQ
Jupyter Notebook installation with Google Colab,1,2,"installation, Colab",04:08,04:42,none,none,none,Als erstes installieren wir Jupyter Notebooks. Dazu verwenden wir Google Colab.,Als erstes installieren wir Jupyter Notebooks. Dazu verwenden wir Google Colab.,https://youtu.be/2zzpgml8_fw,https://youtu.be/wIZ5UaoPWUA
"Simple Calculation and print( )
",1,3,print(),03:07,04:02,none,none,none,"Wir beginnen mit einer einfachen Rechnung und einem ersten Befehl (›print( )‹), um die Funktionsweise eines Jupyter Notebooks kennen zu lernen. Achte dabei vor allem auch auf sinnvolle, Leerzeichen, Leerzeilen – und vor allem auf eine gute Beschreibung und Kommentierung.","Wir beginnen mit einer einfachen Rechnung und einem ersten Befehl (›print( )‹), um die Funktionsweise eines Jupyter Notebooks kennen zu lernen. Achte dabei vor allem auch auf sinnvolle, Leerzeichen, Leerzeilen – und vor allem auf eine gute Beschreibung und Kommentierung.",https://youtu.be/xn-1s7TRkIk,https://youtu.be/Zn3-GU1zXfs
"Basics- Variables, Operators, Indents, Lists & Comments
",1,4,"operators; variables; print(); extract with [ ]
",13:07,13:13,Basics_Variables_Operators_Lists_Indents_Comments,Exercise_Basics_Variables_Operators_Indents_Lists_Comments.ipynb,Solution_Basics_Variables_Operators_Indents_Lists_Comments.ipynb,"Wir starten mit ein paar grundsätzlichen Dingen, welche noch nicht wirklich etwas mit dem Ziel dieser Einheit zu tun haben, aber gut zu wissen sind, bevor es richtig los geht.","Wir starten mit ein paar grundsätzlichen Dingen, welche noch nicht wirklich etwas mit dem Ziel dieser Einheit zu tun haben, aber gut zu wissen sind, bevor es richtig los geht.",https://youtu.be/dFW6XTDGjBo,https://youtu.be/ywORHcXIdss
"Basics- Point Notation, Methods & Functions
",2,1,"functions: sum(), len(), round(), sorted(), range(), list()
methods: append(), count(), clear(), sort()",09:36,11:41,Basics_Point_Notation_Methods_Functions.ipynb,Exercise_Basics_Point_Notation_Methods_Functions.ipynb,Solution_Basics_Point_Notation_Methods_Functions.ipynb,"Wir machen mit einem Nachschlag Basics weiter – wobei, diesmal sind das schon Dinge, welche konkret für das Nachfolgende wichtig sind.","Wir machen mit einem Nachschlag Basics weiter – wobei, diesmal sind das schon Dinge, welche konkret für das Nachfolgende wichtig sind.",https://youtu.be/8MyvQP42sLY,https://youtu.be/bDn0MjBiA7w
"Command- for loop
",2,2,for loop,05:43,09:06,Command_for_loop.ipynb,Exercise_Command_for_loop.ipynb,Solution_Command_for_loop.ipynb,"Wirklich sehr häufig muss ein und dieselbe Rechnung zig-Mal durchgeführt werden. Zum Beispiel wenn für 500 Proben die Oxide- in Element-Gew% umgerechnet werden müssen. Man bewegt sich also in einer wahren Schleife mit der immer gleich Rechnung. Schmerzfreie Computer führen solchen Schleifen in atemberaubender Geschwindigkeit, und mit nur wenig Befehlszeilen durch. Daher sind Schleifen sehr wichtig und eine Kernfunktion der Programmierung. Deshalb schauen wir uns nun an, wie diese funktionieren und wir diese anwenden.","Wirklich sehr häufig muss ein und dieselbe Rechnung zig-Mal durchgeführt werden. Zum Beispiel wenn für 500 Proben die Oxide- in Element-Gew% umgerechnet werden müssen. Man bewegt sich also in einer wahren Schleife mit der immer gleich Rechnung. Schmerzfreie Computer führen solchen Schleifen in atemberaubender Geschwindigkeit, und mit nur wenig Befehlszeilen durch. Daher sind Schleifen sehr wichtig und eine Kernfunktion der Programmierung. Deshalb schauen wir uns nun an, wie diese funktionieren und wir diese anwenden.",https://youtu.be/0TUoVg7Du-w,https://youtu.be/a89vyisvH0E
"Command- def, return, import & making own commands and importing these",2,3,"def, return, import",08:54,08:54,Command_def_return_import_making_own_commands_and_importing_these.ipynb,Exercise_Command_def_return_import_making_own_commands_and_importing_these.ipynb,Solution_Command_def_return_import_making_own_commands_and_importing_these.ipynb,"Und schon jetzt wird es wirklich cool: wir basteln uns einen eigenen Befehl, und legen den in einer Datei ab. Diese Datei können wir fortan importieren wenn wir den Befehl brauchen, und diesen dann einfach anwenden. – Die Datei lässt sich ab sofort um immer mehr Befehle erweitern, welche in der Mineralogie nützlich sind: Aufschmelzung, Mischung, Umrechnungen, Formelberechnung, Isotopen-Fraktionierungen, Gesteinsalter, Thermobarometrie, jegliche Modelle – und vieles mehr. ","Und schon jetzt wird es wirklich cool: wir basteln uns einen eigenen Befehl, und legen den in einer Datei ab. Diese Datei können wir fortan importieren wenn wir den Befehl brauchen, und diesen dann einfach anwenden. – Die Datei lässt sich ab sofort um immer mehr Befehle erweitern, welche in der Mineralogie nützlich sind: Aufschmelzung, Mischung, Umrechnungen, Formelberechnung, Isotopen-Fraktionierungen, Gesteinsalter, Thermobarometrie, jegliche Modelle – und vieles mehr. ",https://youtu.be/eDpmB_sPsrs,https://youtu.be/bCleoYwBu5A
Basic- Introduction to working with data using pandas ,2,4,"pandas: read_excel(), shape(), info, columns, set_option(›display.max_rows', 20), python: type() set_option('display.max_rows', 20), drop_duplicates(), df[›category name‹], >, <, &",11:24,11:24,Basics_Introduction_to_working_with_data_using_pandas.ipynb,Exercise_Basics_Introduction_to_working_with_data_using_pandas.ipynb,Solution_Basics_Introduction_to_working_with_data_using_pandas.ipynb,"Python selbst stellt nur einen sehr begrenzten Umfang an Befehlen zur Daten-Manipulation zur verfügung. Allerdings gibt es sehr viele zusätzliche Befehlspakete – genannt: libraries oder packages – für alles mögliche, auch eines zur Daten-Manipulation. Diese heißt (warum auch immer) ›pandas‹, und dessen Grundzüge lernen wir nun kennen. ","Python selbst stellt nur einen sehr begrenzten Umfang an Befehlen zur Daten-Manipulation zur verfügung. Allerdings gibt es sehr viele zusätzliche Befehlspakete – genannt: libraries oder packages – für alles mögliche, auch eines zur Daten-Manipulation. Diese heißt (warum auch immer) ›pandas‹, und dessen Grundzüge lernen wir nun kennen. ",https://youtu.be/yXb5HHuIuqk,https://youtu.be/eVDAEJduHPc
Basics- Selecting data using locations and indices ,2,5,".columns, .tolist(), .iloc(), .loc(),  .set_index() ",12:36,12:36,Basics_Selecting_data_using_locations_and_indices.ipynb,Exercise_Basics_Selecting_data_using_locations_and_indices.ipynb,Solution_Basics_Selecting_data_using_locations_and_indices.ipynb,"Nun wollen wir lernen, wie leicht mit Pandas jegliche gewünschten Daten aus einer Datenbank, also z.B. einer einfachen Excel-Tabelle extrahiert werden können. Das ist besonders wichtig und hilfreich, wenn die Datenbank sehr groß ist, oder wenn man immer andere Datenbanken verwendet, die aber immer anders aufgebaut sind. Anders aufgebaut meint, dass z.B. die Kategorienamen in anderer Reihenfolge stehen, oder evtl. auch etwas anders lauten. Dann müsste bei einem Code mit Pandas nur der entsprechende Kategoriename geändert werden, der Code selbst bliebe gleich. ","Nun wollen wir lernen, wie leicht mit Pandas jegliche gewünschten Daten aus einer Datenbank, also z.B. einer einfachen Excel-Tabelle extrahiert werden können. Das ist besonders wichtig und hilfreich, wenn die Datenbank sehr groß ist, oder wenn man immer andere Datenbanken verwendet, die aber immer anders aufgebaut sind. Anders aufgebaut meint, dass z.B. die Kategorienamen in anderer Reihenfolge stehen, oder evtl. auch etwas anders lauten. Dann müsste bei einem Code mit Pandas nur der entsprechende Kategoriename geändert werden, der Code selbst bliebe gleich. ",https://youtu.be/p938Ji5BNEs,https://youtu.be/aMdzmwoq4BM
"Command- if, elif, else ",3,1,"== (›test a condition‹),
 True, False",06:11,06:11,Command_if_elif_else.ipynb,Exercise_Command_if_elif_else.ipynb,Solution_Command_if_elif_else.ipynb,"Oftmals sollen unterschiedliche Dinge ausgeführt oder dargestellt werden, je nachdem was für eine Bedingung erfüllt ist. Wird etwa ein bestimmter Messwert unterschritten (die Bedingung), kann als Ausgabe erfolgen ›below detection limit‹. Eine Bedingung kann auch der Input eines Anwenders sein, der z.B. auswählen kann, ob auf der x-Achse die Einheit in wt% oder wt-ppm dargestellt werden soll. Bedingungen sind sehr häufig, und dieser Befehl entsprechend wichtig. ","Oftmals sollen unterschiedliche Dinge ausgeführt oder dargestellt werden, je nachdem was für eine Bedingung erfüllt ist. Wird etwa ein bestimmter Messwert unterschritten (die Bedingung), kann als Ausgabe erfolgen ›below detection limit‹. Eine Bedingung kann auch der Input eines Anwenders sein, der z.B. auswählen kann, ob auf der x-Achse die Einheit in wt% oder wt-ppm dargestellt werden soll. Bedingungen sind sehr häufig, und dieser Befehl entsprechend wichtig. ",https://youtu.be/EwDaGK-nlgI,
Basics-  local & global variables ,3,2,global ,05:05,05:05,Basics_local_global_variables.ipynb,Exercise_Basics_local_global_variables.ipynb,Solution_Basics_local_global_variables.ipynb,"Lokale Variablen gelten nur innerhalb bestimmter Befehle. Das ist sehr praktisch, da derselbe Variablen-Name ohne Konflikte dann noch woanders verwendet werden kann. Globale Variablen gelten dagegen überall, sodass eine Doppelbelegung unbedingt vermieden werden muss. ","Lokale Variablen gelten nur innerhalb bestimmter Befehle. Das ist sehr praktisch, da derselbe Variablen-Name ohne Konflikte dann noch woanders verwendet werden kann. Globale Variablen gelten dagegen überall, sodass eine Doppelbelegung unbedingt vermieden werden muss. ",https://youtu.be/M1bPtrpAhbM,
Basics– Introduction to making a plot using matplotlib ,3,3,"read_csv(),  maptplotlib.pyplot, plt, plot(), scatter(), show(), xlabel(), legend(), xlim() ",10:49,10:49,Basics_Introduction_to_making_a_plot_using_matplotlib.ipynb,Exercise_Basics_Introduction_to_making_a_plot_using_matplotlib.ipynb,Solution_Basics_Introduction_to_making_a_plot_using_matplotlib.ipynb,"Eine weitere library ist die ›matplotlib‹, die praktische alle nur denkbaren Plots und deren noch so komplizierten Darstellungen ermöglicht. In diese nehmen wir nun einen ersten, kleinen Einblick. ","Eine weitere library ist die ›matplotlib‹, die praktische alle nur denkbaren Plots und deren noch so komplizierten Darstellungen ermöglicht. In diese nehmen wir nun einen ersten, kleinen Einblick. ",https://youtu.be/WRpxCtj-g14,
Basics- Plotting selected data ,3,4,none,03:03,03:03,Basics_Plotting_selected_data.ipynb,Exercise_Basics_Plotting_selected_data.ipynb,Solution_Basics_Plotting_selected_data.ipynb,"Zum Schluss dieser Einheit wollen wir die geballte Kraft von Pandas mit der von maplotlib kombinieren. D.h., wir selektieren zunächst mit Pandas die gewünschten Daten aus einer Datenbank, und visualisieren diese umgehend und einfach mit Hilfe der matplotlib Bibliothek. ","Zum Schluss dieser Einheit wollen wir die geballte Kraft von Pandas mit der von maplotlib kombinieren. D.h., wir selektieren zunächst mit Pandas die gewünschten Daten aus einer Datenbank, und visualisieren diese umgehend und einfach mit Hilfe der matplotlib Bibliothek. ",https://youtu.be/zbUv3SuEvS8,
Program- Visualising data from various databases ,3,5,none,14:47,14:47,Program_Visualising_data_from_various_databases.ipynb,Exercise_Program_Visualising_data_from_various_databases.ipynb,Solution_Program_Visualising_data_from_various_databases.ipynb,"Nun wollen wir einmal möglichst viel des bisher Gelernten anwenden und um schickes Programm zu bauen, mit dem auf verschiedene Datenbanken zugreifen und deren Inhalt wie gewünscht –  also Element aussuchen, Einheit festlegen – darstellen können.   ","Nun wollen wir einmal möglichst viel des bisher Gelernten anwenden und um schickes Programm zu bauen, mit dem auf verschiedene Datenbanken zugreifen und deren Inhalt wie gewünscht –  also Element aussuchen, Einheit festlegen – darstellen können.   ",https://youtu.be/EyYYi2VCb0g,
Basics- Function plotting with the numpy package ,3,6,"numpy, .linspace(), .sin(), .log(), .power(), warnings ",09:45,09:45,Basics_Function_plotting_with_the_numpy_package.ipynb,Exercise_Basics_Function_plotting_with_the_numpy_package.ipynb,Solution_Basics_Function_plotting_with_the_numpy_package.ipynb,"Bislang haben wir Daten aus Datenbanken oder Datensätzen in Diagrammen dargestellt und ausgewertet. Letztlich sehen wir bei einer solchen Daten-Darstellung immer den letzten Zustand eines bestimmten Prozesses – oder, noch präziser formuliert: ein Prozess wird zu einem bestimmten Zeitpunkt eingefroren, und die Daten beschreiben diesen eingefrorenen Zustand. Ganz direkt trifft das bei einem Magmatit zu, der ja tatsächlich nichts anderes als gefrorenes Magma ist. Unser Ziel ist es, anhand der Daten des eingefrorenen Prozesses den Prozess des Magmas davor zu rekonstruieren. Das machen wir anhand von Modellen wie z.B. fraktionierte Kristallisation, aber auch Datierung, mit Hilfe einer eingefrorenen Isotopenzusammensetzung. Ein Prozess wird mit einer Gleichung beschrieben, welche über eine Funktion in einem Diagramm dargestellt wird. Dazu schauen wir uns an, wie man eine Funktion in Jupyter Notebooks darstellt. ","Bislang haben wir Daten aus Datenbanken oder Datensätzen in Diagrammen dargestellt und ausgewertet. Letztlich sehen wir bei einer solchen Daten-Darstellung immer den letzten Zustand eines bestimmten Prozesses – oder, noch präziser formuliert: ein Prozess wird zu einem bestimmten Zeitpunkt eingefroren, und die Daten beschreiben diesen eingefrorenen Zustand. Ganz direkt trifft das bei einem Magmatit zu, der ja tatsächlich nichts anderes als gefrorenes Magma ist. Unser Ziel ist es, anhand der Daten des eingefrorenen Prozesses den Prozess des Magmas davor zu rekonstruieren. Das machen wir anhand von Modellen wie z.B. fraktionierte Kristallisation, aber auch Datierung, mit Hilfe einer eingefrorenen Isotopenzusammensetzung. Ein Prozess wird mit einer Gleichung beschrieben, welche über eine Funktion in einem Diagramm dargestellt wird. Dazu schauen wir uns an, wie man eine Funktion in Jupyter Notebooks darstellt. ",https://youtu.be/aCY6PWt_TTU,
"Basics- Manipulating row, columns, filters (again), etc. using pandas ",4,1,"~filter, .isin(), .str.contains(), .index, .value_count(), .rename, export, .to_csv, .to_excel ",13:55,13:55,none,none,none,"In dieser zweiten Einheit zu Pandas lernen wir weitere Möglichkeiten um Daten in pandas dataframes zu manipulieren, zählen, exportieren, etc. Es macht jedoch keinen Sinn, in diesem Kurs den vollständigen Umfang von Pandas – oder jeglicher anderer Python-Bibliothek – darzustellen. Vielmehr sucht man sich je nach zu lösender Fragestellung die nötigen Befehle aus dem persönlichen Fundus plus der entsprechenden Recherche in den einschlägigen Ressourcen aus dem Internet zusammen. ","In dieser zweiten Einheit zu Pandas lernen wir weitere Möglichkeiten um Daten in pandas dataframes zu manipulieren, zählen, exportieren, etc. Es macht jedoch keinen Sinn, in diesem Kurs den vollständigen Umfang von Pandas – oder jeglicher anderer Python-Bibliothek – darzustellen. Vielmehr sucht man sich je nach zu lösender Fragestellung die nötigen Befehle aus dem persönlichen Fundus plus der entsprechenden Recherche in den einschlägigen Ressourcen aus dem Internet zusammen. ",https://youtu.be/i2fpkcdhUlU,
Command- API requests ,4,2,"requests,  .get(), json, str() ",16:32,16:32,Command_API_requests.ipynb,Exercise_Command_API_requests.ipynb,Solution_Command_API_requests.ipynb,"Was ist eine API? Ein Application Programming Interface. Das sagt kaum mehr. Es ist eine Schnittstelle. Hilft vielleicht etwas. Angenommen, wir wollen die aktuellen Wetterdaten einer Stadt wissen. Dann können wir eine Anfrage (request) an einen Server stellen, und bekommen die Wetterdaten geliefert. Hört sich einfach an – und ist es tatsächlich auch. In dieser Einheit lernen wir also, wie wir sehr einfach Daten von einem Server in unser Jupyter Notebook laden, und dort darstellen, weiter verarbeiten, visualisieren, etc. können. ","Was ist eine API? Ein Application Programming Interface. Das sagt kaum mehr. Es ist eine Schnittstelle. Hilft vielleicht etwas. Angenommen, wir wollen die aktuellen Wetterdaten einer Stadt wissen. Dann können wir eine Anfrage (request) an einen Server stellen, und bekommen die Wetterdaten geliefert. Hört sich einfach an – und ist es tatsächlich auch. In dieser Einheit lernen wir also, wie wir sehr einfach Daten von einem Server in unser Jupyter Notebook laden, und dort darstellen, weiter verarbeiten, visualisieren, etc. können. ",https://youtu.be/x571C3rJJM0,