Titel,Kapitel,Unterkapitel,Schlagworte,Laufzeit,Duration,Lecture ipynb,Exercise ipynb,Solution ipynb,Beschreibung,Description,Youtube,Youtube_eng
Jupyter Notebook installation with Anaconda,1,1,"installation, Anaconda",03:05,04:21,none,none,none,"Als erstes installieren wir Jupyter Notebooks. Dazu verwenden wir Anaconda, welches wir über: https://www.anaconda.com/products/individual erhalten.","We start with installing Jupyter Notebooks. For this we install the Anaconda environment, which we obtain from: https://www.anaconda.com/products/individual",https://youtu.be/MK1jGJBydUM,https://youtu.be/m7uvkzKhXfQ
Jupyter Notebook installation with Google Colab,1,2,"installation, Colab",04:08,04:42,none,none,none,Als erstes installieren wir Jupyter Notebooks. Dazu verwenden wir Google Colab.,We start with installing Jupyter Notebooks. Here we use Google Colab.,https://youtu.be/2zzpgml8_fw,https://youtu.be/wIZ5UaoPWUA
"Simple Calculation and print( )
",1,3,print(),03:07,04:02,none,none,none,"Wir beginnen mit einer einfachen Rechnung und einem ersten Befehl (›print( )‹), um die Funktionsweise eines Jupyter Notebooks kennen zu lernen. Achte dabei vor allem auch auf sinnvolle Leerzeichen, Leerzeilen – und vor allem auf eine gute Beschreibung und Kommentierung.","We start with a simple calculation and a first command (›print( )‹) to learn how Jupyter Notebooks work. Check that your code is readable, i.e., insert sensible spaces, new lines and informative comments.",https://youtu.be/xn-1s7TRkIk,https://youtu.be/Zn3-GU1zXfs
"Basics- Variables, Operators, Indents, Lists & Comments
",1,4,"operators; variables; print(); extract with [ ]
",13:07,13:13,Basics_Variables_Operators_Lists_Indents_Comments.ipynb,Exercise_Basics_Variables_Operators_Indents_Lists_Comments.ipynb,Solution_Basics_Variables_Operators_Indents_Lists_Comments.ipynb,"Wir starten mit ein paar grundsätzlichen Dingen welche gut zu wissen und hilfreich sind, bevor wir richtig in Python einsteigen.","We start with a couple of basics that are good to know and helpful to know, before we make a full start into Python.",https://youtu.be/dFW6XTDGjBo,https://youtu.be/ywORHcXIdss
"Basics- Point Notation, Methods & Functions
",2,1,"functions: sum(), len(), round(), sorted(), range(), list()
methods: append(), count(), clear(), sort()",09:36,11:41,Basics_Point_Notation_Methods_Functions.ipynb,Exercise_Basics_Point_Notation_Methods_Functions.ipynb,Solution_Basics_Point_Notation_Methods_Functions.ipynb,"Wir machen mit einem Nachschlag Basics weiter, welche konkret für das Nachfolgende wichtig sind.",We continue with some basics that will need and use from now on.,https://youtu.be/8MyvQP42sLY,https://youtu.be/bDn0MjBiA7w
"Command- for loop
",2,2,for loop,05:43,09:06,Command_for_loop.ipynb,Exercise_Command_for_loop.ipynb,Solution_Command_for_loop.ipynb,"Wirklich sehr häufig muss ein und dieselbe Rechnung zig-Mal durchgeführt werden. Zum Beispiel wenn für 500 Proben die Oxide- in Element-Gew% umgerechnet werden müssen. Man bewegt sich also in einer wahren Schleife mit der immer gleich Rechnung. Schmerzfreie Computer führen solchen Schleifen in atemberaubender Geschwindigkeit, und mit nur wenig Befehlszeilen durch. Daher sind Schleifen sehr wichtig und eine Kernfunktion der Programmierung. Deshalb schauen wir uns nun an, wie diese funktionieren und wir diese anwenden.","Very often a specific calculation needs to be repeated over and over again. For example, when the oxide-wt% of 500 samples need to be converted into element-wt%. This means looping this same calculation many times. Computers patiently perform such loops in breathless speed with only few lines of code. Loops are therefore very important and a core functionality of programming. Here we have a look at how loops work and apply these.",https://youtu.be/0TUoVg7Du-w,https://youtu.be/a89vyisvH0E
"Command- def, return, import & making own commands and importing these",2,3,"def, return, import",08:54,08:54,none,Exercise_Command_def_return_import_making_own_commands_and_importing_these.ipynb,Solution_Command_def_return_import_making_own_commands_and_importing_these.ipynb,"Und schon jetzt wird es wirklich cool: wir basteln uns einen eigenen Befehl. Damit können wir ab sofort neue Befehle konstruieren, welche in der Geochemie nützlich sind, z.B. für Aufschmelzung, Mischung, Umrechnungen, Formelberechnung, Isotopen-Fraktionierungen, Gesteinsalter, Thermobarometrie, jegliche Modelle – und vieles mehr. ","And already now, it becomes really cool: we are crafting our own functions/commands. It will then be possible to construct new function that are helpful geochemistry, e.g., for melting, mixing, conversions, formula calculations, isotope fractionations, rock ages, thermobarometry, any model – and much more.",https://youtu.be/eDpmB_sPsrs,https://youtu.be/bCleoYwBu5A
Basic- Introduction to working with data using pandas ,2,4,"pandas: read_excel(), shape(), info, columns, set_option(›display.max_rows', 20), python: type() set_option('display.max_rows', 20), drop_duplicates(), df[›category name‹], >, <, &",11:24,15:50,Basics_Introduction_to_working_with_data_using_pandas.ipynb,Exercise_Basics_Introduction_to_working_with_data_using_pandas.ipynb,Solution_Basics_Introduction_to_working_with_data_using_pandas.ipynb,"Python selbst stellt nur einen sehr begrenzten Umfang an Befehlen zur Daten-Manipulation zur Verfügung. Allerdings gibt es sehr viele zusätzliche Befehlspakete – genannt: libraries oder packages – für alles mögliche, auch eines zur Daten-Manipulation. Eine populäre library zur Datenmanipulation heißt – warum auch immer – ›pandas‹, und dessen Grundzüge lernen wir nun kennen. ","Python itself provides a rather limited set of function for data manipulation. However, there exists a large number of additional libraries or packages that provide numerous functions for all kinds of use cases, also for data manipulation. One popular library for data manipulation is called – for whatever reason – ›pandas‹. Here we will learn the basics of this package.",https://youtu.be/yXb5HHuIuqk,https://youtu.be/eVDAEJduHPc
Basics- Selecting data using locations and indices ,2,5,".columns, .tolist(), .iloc(), .loc(),  .set_index() ",12:36,12:35,Basics_Selecting_data_using_locations_and_indices.ipynb,Exercise_Basics_Selecting_data_using_locations_and_indices.ipynb,Solution_Basics_Selecting_data_using_locations_and_indices.ipynb,"Nun wollen wir lernen, wie leicht mit Pandas jegliche gewünschten Daten aus einer Datenbank, also z.B. einer einfachen Excel-Tabelle extrahiert werden können. Das ist besonders wichtig und hilfreich, wenn die Datenbank sehr groß ist, oder wenn man immer andere Datenbanken verwendet, die aber immer anders aufgebaut sind. Anders aufgebaut meint, dass z.B. die Kategorienamen in anderer Reihenfolge stehen, oder evtl. auch etwas anders lauten. Dann müsste bei einem Code mit Pandas nur der entsprechende Kategoriename geändert werden, der Code selbst bliebe gleich. ","Now we are learning how easy any data can be extracted from a dataset, e.g., a simple Excel-sheet. This is particularly interesting when a database is very large, or when many different types of databases or -files are used that are always set-up a little different. the latter means: categories have a different sequence or have slightly different names. In such a case, for example, we would only need to change the category names, while the code itself would remain the same.",https://youtu.be/p938Ji5BNEs,https://youtu.be/aMdzmwoq4BM
"Command- conditionals: if, elif, else ",3,1,"== (›test a condition‹),
 True, False",06:11,08:20,Command_if_elif_else.ipynb,Exercise_Command_if_elif_else.ipynb,Solution_Command_if_elif_else.ipynb,"Oftmals sollen unterschiedliche Dinge ausgeführt oder dargestellt werden, je nachdem was für eine Bedingung erfüllt ist. Wird etwa ein bestimmter Messwert unterschritten (die Bedingung), kann als Ausgabe erfolgen ›below detection limit‹. Eine Bedingung kann auch der Input eines Anwenders sein, der z.B. auswählen kann, ob auf der x-Achse die Einheit in wt% oder wt-ppm dargestellt werden soll. Bedingungen sind sehr häufig, und dieser Befehl entsprechend wichtig. ","In many cases, a specific code shall be executed, depending on a certain condition that has to be met. For example, if a value in a table is below a certain threshold, it shall be replaced by ›below detection limit‹. Another condition could come from a user, who might choose as an input whether the unit on the x-axis shall be ›wt%‹ or ›wt-ppm‹. Conditions are very common, and, hence, this is quite a critical command to know.",https://youtu.be/EwDaGK-nlgI,https://youtu.be/HEZ3-hKeI3U
Basics-  local & global variables ,3,2,global ,05:05,07:00,Basics_local_global_variables.ipynb,Exercise_Basics_local_global_variables.ipynb,Solution_Basics_local_global_variables.ipynb,"Lokale Variablen gelten nur innerhalb bestimmter Befehle. Das ist sehr praktisch, da derselbe Variablen-Name ohne Konflikte dann noch woanders verwendet werden kann. Globale Variablen gelten dagegen überall, sodass eine Doppelbelegung deren Namensbezeichnung unbedingt vermieden werden muss.","Local variables are only valid with specific commands/functions. This is very convenient, as then a local variable name can be used, without being in potential conflict with another variable elsewhere with the same name. Global variables are valid everywhere, and one needs to be careful while naming these.",https://youtu.be/M1bPtrpAhbM,https://youtu.be/2xNphQoii2A
Basics– Introduction to making a plot using matplotlib ,3,3,"read_csv(),  maptplotlib.pyplot, plt, plot(), scatter(), show(), xlabel(), legend(), xlim() ",10:49,10:53,Basics_Introduction_to_making_a_plot_using_matplotlib.ipynb,Exercise_Basics_Introduction_to_making_a_plot_using_matplotlib.ipynb,Solution_Basics_Introduction_to_making_a_plot_using_matplotlib.ipynb,"Eine weitere populäre library ist die ›matplotlib‹, die praktische alle nur denkbaren Plots und deren noch so komplizierten Darstellungen ermöglicht. In diese nehmen wir nun einen ersten, kleinen Einblick. ","Another popular library is ›matplotlib‹ that allows to basically produce every possible plot you could think of or wish for, no matter how complicated these might be. Here we will have a first glimpse into how to use this package.",https://youtu.be/WRpxCtj-g14,https://youtu.be/iG0iYn3zyk8
Basics- Plotting selected data ,3,4,none,03:03,04:30,Basics_Plotting_selected_data.ipynb,Exercise_Basics_Plotting_selected_data.ipynb,Solution_Basics_Plotting_selected_data.ipynb,"Nun wollen wir die geballte Kraft von pandas mit der von maplotlib kombinieren. D.h., wir selektieren zunächst mit Pandas die gewünschten Daten aus einer Datenbank, und visualisieren diese umgehend und einfach mit Hilfe der matplotlib Bibliothek. ","Now we want to combine the powers of pandas and matplotlib. For this, we first select the desired data from a given dataset using pandas, and will immediately visualise these with the matplotlib library.",https://youtu.be/zbUv3SuEvS8,https://youtu.be/fVtpwhDRpdM
Basics- Function plotting with the numpy package ,3,5,"numpy, .linspace(), .sin(), .log(), .power(), warnings ",06:35,07:17,Basics_Function_plotting_with_the_numpy_package.ipynb,Exercise_Basics_Function_plotting_with_the_numpy_package.ipynb,Solution_Basics_Function_plotting_with_the_numpy_package.ipynb,"Bislang haben wir Daten aus Datenbanken oder Datensätzen in Diagrammen dargestellt und ausgewertet. Letztlich sehen wir bei einer solchen Daten-Darstellung immer den letzten Zustand eines bestimmten Prozesses – oder, noch präziser formuliert: ein Prozess wird zu einem bestimmten Zeitpunkt eingefroren, und die Daten beschreiben diesen eingefrorenen Zustand. Ganz direkt trifft das bei einem Magmatit zu, der ja tatsächlich nichts anderes als gefrorenes Magma ist. Unser Ziel ist es, anhand der Daten des eingefrorenen Prozesses den Prozess des Magmas davor zu rekonstruieren. Das machen wir anhand von Modellen wie z.B. fraktionierte Kristallisation, aber auch Datierung, also in dem Fall mit Hilfe einer eingefrorenen Isotopenzusammensetzung. Ein Prozess wird mit einer Gleichung beschrieben, welche über eine Funktion in einem Diagramm dargestellt wird. Dazu schauen wir uns an, wie man eine Funktion in Jupyter Notebooks darstellt. ","So far, we visualised and evaluated data from datasets. Such visualisations show us the last state of a specific process, i.e., a process that was frozen at a specific time – and the data describe this frozen state. In fact, a magmatite is nothing else but a frozen magma. It is typically our goal to use the data from this frozen state to reconstruct the process that lead to this current. For this we use models such as fractional crystallisation or age dating, in which case we use frozen isotope ratios. A process is usually described with a formula that is used in a function and then plotted in a diagram. Here we will see how we can plot functions in Jupyter Notebooks. ",https://youtu.be/kBkCtRFmkqs,https://youtu.be/rEomcm_E7j4
Basics- Dictionary – another type of list ,3,6,"{ }  (-> Dictionary brackets), pd.DataFrame() ",12:36,12:49,Basics_Dictionary_another_type_of_list.ipynb,Exercise_Basics_Dictionary_another_type_of_list.ipynb,Solution_Basics_Dictionary_another_type_of_list.ipynb,"Daten, die man sich aus online-Datenbanken zieht sind häufig in Listen des Typs Dictionary (z.B. json Formate). Dictionaries sind schnell zugänglich und leicht verständlich nachdem wir nun Pandas DataFrames kennen – und können auch direkt in diese umformatiert werden. ","Data from online databases often use dictionaries as their data format (e.g., json formats). Dictionaries are simple to access and understand, in particular as we already know pandas DataFrames – in which dictionaries can be easily converted.",https://youtu.be/WXv79tpor5s,https://youtu.be/zuPAWFL0jVY
"Basics- Manipulating row, columns, filters (again), etc. using pandas ",4,1,"~filter, .isin(), .str.contains(), .index, .value_count(), .rename, export, .to_csv, .to_excel ",13:55,18:27,none,none,none,"In dieser Einheit zu Pandas lernen wir weitere Befehle, um Daten in pandas DataFrames zu manipulieren, zählen, exportieren, etc. Es macht jedoch keinen Sinn, in diesem Kurs den vollständigen Umfang von Pandas – oder jeglicher anderer Python-Bibliothek – darzustellen. Vielmehr sucht man sich je nach zu lösender Fragestellung die nötigen Befehle aus dem persönlichen Fundus plus der entsprechenden Recherche in den einschlägigen Ressourcen aus dem Internet zusammen. ","In this unit about pandas we learn additional functions to manipulate, count, export, etc. data from pandas DataFrames. It is, however, not sensible to provide a systematic overview of pandas – or any other Python library. It is always the best way to find the appropriate functions for a given problem from forums or the usually excellent library documentation webpages.",https://youtu.be/i2fpkcdhUlU,https://youtu.be/pvHJ7rn7za8
Command- API requests ,4,2,"requests,  .get(), json, str() ",16:32,16:32,Command_API_requests.ipynb,Exercise_Command_API_requests.ipynb,Solution_Command_API_requests.ipynb,"Was ist eine API? Ein Application Programming Interface. Das sagt kaum mehr. Es ist eine Schnittstelle. Hilft vielleicht etwas. Angenommen, wir wollen die aktuellen Wetterdaten einer Stadt wissen. Dann können wir eine Anfrage (request) an einen Server stellen, und bekommen die Wetterdaten geliefert. Hört sich einfach an – und ist es tatsächlich auch. In dieser Einheit lernen wir, wie wir sehr einfach Daten von einem Server in unser Jupyter Notebook laden, und dort darstellen, weiter verarbeiten, visualisieren, etc. können. ","API stands for: application programming interface – which doesn’t necessarily help. Let’s say we want to know the current weather of a particular city. We can then make a request to a server – which will provide us with the desired weather data. Sounds simple – and in fact it is. Here we learn how to request data from a server, and load these into our Jupyter Notebook to then display, evaluate, visualise, etc. these data.",https://youtu.be/x571C3rJJM0,https://youtu.be/pvHJ7rn7za8